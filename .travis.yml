---
sudo: required
dist: bionic
env:
  global:
  # auto vagrant installation
notifications:
  slack:
    on_failure: always

fleet_script_usernetes_containerd_tasks : &fleet_script_usernetes_containerd_tasks
      script:
        - USERNETES_VERSION=20200611.1
        - wget https://github.com/rootless-containers/usernetes/releases/download/v$USERNETES_VERSION/usernetes-x86_64.tbz
        - tar xjvf usernetes-x86_64.tbz &&  cd usernetes

fleet_script_usernetes_crio_tasks : &fleet_script_usernetes_crio_tasks
      script:
        - USERNETES_VERSION=20200611.1
        - wget https://github.com/rootless-containers/usernetes/releases/download/v$USERNETES_VERSION/usernetes-x86_64.tbz
        - tar xjvf usernetes-x86_64.tbz &&  cd usernetes



fleet_script_usernetesindocker_tasks : &fleet_script_usernetesindocker_tasks
      script:
        - USERNETES_VERSION=20200611.1
        - wget https://github.com/rootless-containers/usernetes/releases/download/v$USERNETES_VERSION/usernetes-x86_64.tbz
        - tar xjvf usernetes-x86_64.tbz &&  cd usernetes
        #All-in-one Docker image is available as rootlesscontainers/usernetes on Docker Hub.
        - docker build -t rootlesscontainers/usernetes .
        #Single node The image is based on Fedora
        - sudo docker run -td --name usernetes-node -p 127.0.0.1:6443:6443 --privileged rootlesscontainers/usernetes --cri=containerd


fleet_script_usernetesindocker_dockercompose_tasks : &fleet_script_usernetesindocker_dockercompose_tasks
      script:
        - USERNETES_VERSION=20200611.1
        - wget https://github.com/rootless-containers/usernetes/releases/download/v$USERNETES_VERSION/usernetes-x86_64.tbz
        - tar xjvf usernetes-x86_64.tbz &&  cd usernetes
        #All-in-one Docker image is available as rootlesscontainers/usernetes on Docker Hub.
        - docker build -t rootlesscontainers/usernetes .
        #Single node The image is based on Fedora
        - make up
        - export KUBECONFIG=$HOME/.config/usernetes/docker-compose.kubeconfig
        - sudo kubectl apply -f manifests/*.yaml
        - kubectl get nodes -o wide


fleet_script_rootless_tasks : &fleet_script_rootless_tasks
      script:
        - git clone https://github.com/rootless-containers/rootlesskit.git
        - cd rootlesskit && ls -lai
        # - make
fleet_script_fakeroot_tasks : &fleet_script_fakeroot_tasks
      script:
        - sudo apt-get install -qqy fakeroot
fleet_script_tasks : &fleet_script_tasks
      script:
        - python --version
fleet_install_tasks : &fleet_install_tasks
      install:
        - pip install -r requirements.txt


matrix:
  fast_finish: true
  include:

    # https://github.com/rootless-containers/rootlesskit#setup
    - name: "rootless  Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_rootless_tasks
      after_success:
        - deactivate

    # https://wiki.debian.org/FakeRoot
    # https://sylabs.io/guides/3.4/user-guide/fakeroot.html
    - name: "fakeroot  Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_fakeroot_tasks
      after_success:
        - deactivate

    # https://github.com/rootless-containers/usernetes#quick-start
    - name: "usernetes container runtimes(-cri=containerd) Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: kubectl
               confinement: classic
               channel: latest/stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_usernetes_containerd_tasks
      after_success:
        - deactivate

    # https://github.com/rootless-containers/usernetes#quick-start
    - name: "usernetes container runtimes(cri=crio) Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: kubectl
               confinement: classic
               channel: latest/stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_usernetes_crio_tasks
      after_success:
        - deactivate

    # https://github.com/rootless-containers/usernetes#quick-start
    - name: "Run Usernetes in Docker - single node Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_usernetesindocker_tasks
      after_success:
        - deactivate

    # https://github.com/rootless-containers/usernetes#quick-start
    - name: "Run Usernetes in Docker - Multi node (Docker Compose) Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: kubectl
               confinement: classic
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_usernetesindocker_dockercompose_tasks
      after_success:
        - deactivate

#   # =============================================macOS=============================================
    # https://github.com/moby/buildkit
    - name: "buildkit Python 2.7.17 on macOS 10.15.4 osx xcode11.5"
      os: osx
      osx_image: xcode11.5
      language: shell
      addons:
        homebrew:
          packages:
            - buildkit
          # casks: # Installing Casks
          #   - podman
          update: true
      before_install:
        - pip install virtualenv
        - virtualenv -p $(which python2) ~venvpy2
        - source ~venvpy2/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      script:
        - brew info buildkit
        # - brew doctor #Check system for potential problems
        - brew update #Update brew and cask
        - brew cask upgrade
      after_success:
        - brew uninstall kubectl buildkit
        - brew cleanup buildkit
        - deactivate
