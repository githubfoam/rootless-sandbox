---
sudo: required
dist: bionic
env:
  global:
  # auto vagrant installation
notifications:
  slack:
    on_failure: always

fleet_script_usernetes_containerd_tasks : &fleet_script_usernetes_containerd_tasks
      script:
        - USERNETES_VERSION=20200611.1
        - wget https://github.com/rootless-containers/usernetes/releases/download/v$USERNETES_VERSION/usernetes-x86_64.tbz
        - tar xjvf usernetes-x86_64.tbz &&  cd usernetes
        #install.sh installs Usernetes systemd units to $HOME/.config/systemd/unit
        #use containerd as the CRI runtime (default):
        # - ./install.sh --cri=containerd
        # - sudo sh -c "./install.sh --cri=containerd" #Failed to connect to bus: Operation not permitted
        # - export KUBECONFIG="$HOME/.config/usernetes/master/admin-localhost.kubeconfig" #enable CoreDNS
        # - sudo kubectl apply -f manifests/*.yaml
        # - kubectl get nodes -o wide
        # - ./uninstall.sh
        # - ./show-cleanup-command.sh
        # - eval $(./show-cleanup-command.sh)

fleet_script_usernetes_crio_tasks : &fleet_script_usernetes_crio_tasks
      script:
        - USERNETES_VERSION=20200611.1
        - wget https://github.com/rootless-containers/usernetes/releases/download/v$USERNETES_VERSION/usernetes-x86_64.tbz
        - tar xjvf usernetes-x86_64.tbz &&  cd usernetes
        #install.sh installs Usernetes systemd units to $HOME/.config/systemd/unit
        #use containerd as the CRI runtime (default):
        # - ./install.sh --cri=crio
        # - sudo sh -c "./install.sh --cri=crio"
        # - export KUBECONFIG="$HOME/.config/usernetes/master/admin-localhost.kubeconfig" #enable CoreDNS
        # - sudo kubectl apply -f manifests/*.yaml
        # - kubectl get nodes -o wide
        # - ./uninstall.sh
        # - ./show-cleanup-command.sh
        # - eval $(./show-cleanup-command.sh)


fleet_script_usernetesindocker_tasks : &fleet_script_usernetesindocker_tasks
      script:
        - USERNETES_VERSION=20200611.1
        - wget https://github.com/rootless-containers/usernetes/releases/download/v$USERNETES_VERSION/usernetes-x86_64.tbz
        - tar xjvf usernetes-x86_64.tbz &&  cd usernetes
        #All-in-one Docker image is available as rootlesscontainers/usernetes on Docker Hub.
        - docker build -t rootlesscontainers/usernetes .
        #Single node The image is based on Fedora
        # containerd runtimes?
        - sudo docker run -td --name usernetes-node -p 127.0.0.1:6443:6443 --privileged rootlesscontainers/usernetes --cri=containerd
        # -  docker run -td --name usernetes-node -p 127.0.0.1:6443:6443 --privileged rootlesscontainers/usernetes --cri=crio??
        # - sudo docker cp usernetes-node:/home/user/.config/usernetes/master/admin-localhost.kubeconfig docker.kubeconfig
        # - export KUBECONFIG=./docker.kubeconfig
        # - kubectl apply -f manifests/*.yaml
        # - kubectl get nodes -o wide
        # - kubectl run -it --rm --image busybox foo && uname -a && exit

fleet_script_usernetesindocker_dockercompose_tasks : &fleet_script_usernetesindocker_dockercompose_tasks
      script:
        - USERNETES_VERSION=20200611.1
        - wget https://github.com/rootless-containers/usernetes/releases/download/v$USERNETES_VERSION/usernetes-x86_64.tbz
        - tar xjvf usernetes-x86_64.tbz &&  cd usernetes
        #All-in-one Docker image is available as rootlesscontainers/usernetes on Docker Hub.
        - docker build -t rootlesscontainers/usernetes .
        #Single node The image is based on Fedora
        - make up
        - export KUBECONFIG=$HOME/.config/usernetes/docker-compose.kubeconfig
        - sudo kubectl apply -f manifests/*.yaml
        - kubectl get nodes -o wide
        # - sudo kubectl run --replicas=3 --image=nginx:alpine nginx
        - kubectl get nodes -o wide
        # - sudo kubectl exec -it nginx-6b4b85b77b-7hqrk -- wget -O - http://10.5.79.3
        # - sudo kubectl exec -it nginx-6b4b85b77b-7hqrk -- wget -O - http://10.5.7.3

fleet_script_rootless_tasks : &fleet_script_rootless_tasks
      script:
        # - go get github.com/rootless-containers/rootlesskit/cmd/rootlesskit
        # - go get github.com/rootless-containers/rootlesskit/cmd/rootlessctl
        - git clone https://github.com/rootless-containers/rootlesskit.git
        - cd rootlesskit && ls -lai
        # - make
fleet_script_fakeroot_tasks : &fleet_script_fakeroot_tasks
      script:
        - sudo apt-get install -qqy fakeroot
fleet_script_tasks : &fleet_script_tasks
      script:
        - python --version
fleet_install_tasks : &fleet_install_tasks
      install:
        - pip install -r requirements.txt


matrix:
  fast_finish: true
  include:

    # https://github.com/rootless-containers/rootlesskit#setup
    - name: "rootless  Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_rootless_tasks
      after_success:
        - deactivate

    # https://wiki.debian.org/FakeRoot
    # https://sylabs.io/guides/3.4/user-guide/fakeroot.html
    - name: "fakeroot  Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_fakeroot_tasks
      after_success:
        - deactivate

    # https://github.com/rootless-containers/usernetes#quick-start
    - name: "usernetes container runtimes(-cri=containerd) Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: kubectl
               confinement: classic
               channel: latest/stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_usernetes_containerd_tasks
      after_success:
        - deactivate

    # https://github.com/rootless-containers/usernetes#quick-start
    - name: "usernetes container runtimes(cri=crio) Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: kubectl
               confinement: classic
               channel: latest/stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_usernetes_crio_tasks
      after_success:
        - deactivate

    # https://github.com/rootless-containers/usernetes#quick-start
    - name: "Run Usernetes in Docker - single node Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: minikube
               confinement: strict
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_usernetesindocker_tasks
      after_success:
        - deactivate

    # https://github.com/rootless-containers/usernetes#quick-start
    - name: "Run Usernetes in Docker - Multi node (Docker Compose) Python 3.7 on bionic amd64" #OK
      dist: bionic
      addons:
           snaps:
             - name: kubectl
               confinement: classic
               channel: stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_usernetesindocker_dockercompose_tasks
      after_success:
        - deactivate

#   # =============================================macOS=============================================
    # https://github.com/moby/buildkit
    - name: "buildkit Python 2.7.17 on macOS 10.15.4 osx xcode11.5"
      os: osx
      osx_image: xcode11.5
      language: shell
      addons:
        homebrew:
          packages:
            - buildkit
          # casks: # Installing Casks
          #   - podman
          update: true
      before_install:
        - pip install virtualenv
        - virtualenv -p $(which python2) ~venvpy2
        - source ~venvpy2/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      script:
        - brew info buildkit
        # - brew doctor #Check system for potential problems
        - brew update #Update brew and cask
        - brew cask upgrade
      after_success:
        - brew uninstall kubectl buildkit
        - brew cleanup buildkit
        - deactivate
#
#     - name: "podman(no support) CRI-O container runtime minikube kubectl Python 2.7.17 on macOS 10.15.4 osx xcode11.5"
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       addons:
#         homebrew:
#           packages:
#             - kubectl
#             - minikube
#           casks: # Installing Casks
#             - podman
#           update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         - kubectl version --client
#         - brew cat kubectl
#         - brew cat minikube
#         - brew home kubectl
#         - brew home minikube
#         - brew info kubectl
#         - brew info minikube
#         # - brew doctor #Check system for potential problems
#         - brew update #Update brew and cask
#         - brew cask upgrade
#         - brew cask info podman
#         # - podman info #No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself
#         # - "podman build ."
#         # - podman images #lists all the images
#         # - podman run  -p 80:80 -dit centos
#         # - podman ps -a
#         # - minikube config set driver podman #make docker the default driver
#         # - minikube start --driver=podman --container-runtime=cri-o #Start a cluster using the podman driver
#       after_success:
#         - brew uninstall kubectl minikube
#         - brew cleanup kubectl minikube
#         - brew cask uninstall --force podman
#         - deactivate
#
#  # =============================================windows=============================================
#
#     - name: "podman(no support) kubectl minikube Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         - choco install kubernetes-cli
#         - choco install minikube
#         # - minikube start --driver=none # The driver 'none' is not supported on windows
#         # - minikube status
#         - kubectl version --client
#         # - set USERPROFILE #query the value of %USERPROFILE%
#         # - set #see all currently defined environment variables    #USERPROFILE='C:\Users\travis'
#         - echo cd %USERPROFILE% #when debugging a command
#         - echo %cd% #print current path
#         - echo mkdir %USERPROFILE%\.kube
#         - mkdir %USERPROFILE%\.kube
#         - echo cd %USERPROFILE%\.kube
#         - cd %USERPROFILE%\.kube
#         # - mkdir .kube
#         # - cd .kube
#         - cd #print current path
#         # - New-Item config -type file #Configure kubectl to use a remote Kubernetes cluster:
#       after_success:
#         - deactivate
